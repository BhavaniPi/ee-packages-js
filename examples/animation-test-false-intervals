/*
Copyright (c) 2018 Gennadii Donchyts. All rights reserved.

This work is licensed under the terms of the MIT license.  
For a copy, see <https://opensource.org/licenses/MIT>.
*/

var animation = require('users/gena/packages:animation')
var assets = require('users/gena/packages:assets')
var palettes = require('users/gena/packages:colorbrewer').Palettes

var bounds = ee.Geometry(Map.getBounds(true))
  //.centroid(1)

var start = { year: 2010, month: 1 }
var stop = { year: 2017, month: 1 }

start.date = ee.Date.fromYMD(start.year, start.month, 1)
stop.date = ee.Date.fromYMD(stop.year, stop.month, 1)

// get images from one or multiple missions
var images = assets.getImages(bounds, {
  fast: true,
  filter: ee.Filter.date(start.date, stop.date),
  //filterMasked: true,
  missions: [
    'S2', 
    'L8', 
    'L7', 
    //'L5'
  ]
})

// images = images.sort('system:time_start').map(function(i) { 
//   return i.visualize({bands:['swir','nir','red'], gamma: 2, min: 0.07})
//     .set({ label: i.date().format('YYYY-MM-dd') })
// })
//animation.animate(images, {label: 'label', maxFrames: 300})  

// filter out noisy images
/*images = assets.getMostlyCleanImages(images, bounds, {
    scale: Map.getScale() * 20, 
    
    // how much should we deviate from cloud frequency when filtering images, use negative value to allow more (cloudy) images
    cloudFrequencyThresholdDelta: 0.15,

    // percentile and band used for cloudness, usually enough to choose one like green    
    scorePercentile: 85, 
    qualityBand: 'green',
  })
*/  // .sort('system:time_start')
  //.sort('quality')

print('Count: ', images.size())

// raw
/*images = images
  .map(function(i) {
    var image = i
    //var image = images.filterDate(i.date(), i.date().advance(-1, 'month')).mosaic()
  
    //return image.visualize({bands:['red','green','blue'], gamma: 1.4, min:0.05, max:[0.5, 0.5, 0.55]})
    //return image.normalizedDifference(['nir','red']).visualize({palette:palettes.YlGn[9], min: -0.1, max: 1})    
    return image.visualize({bands:['swir','nir','red'], gamma: 2, min: 0.05, max: 0.6})
      .set({ label: i.date().format('YYYY-MM-dd') })
  })
*/  

// per interval
var monthStep = 1
var averagingStep = 24
var images = ee.List.sequence(start.year, stop.year, 1).map(function(year) {
  return ee.List.sequence(1, 12, monthStep).map(function(month) {
    var start = ee.Date.fromYMD(year, month, 1)
    var stop = start.advance(averagingStep, 'month')
    
    var image = images
      .filterDate(start, stop)
      .select(['swir','nir','red'])
      //.select(['red', 'green', 'blue'])
      .reduce(ee.Reducer.percentile([20]))
      //.reduce(ee.Reducer.median())
    
    image = image.visualize({gamma: 1.5, min: 0.05, max:[0.5, 0.5, 0.5]})
    
    return image
      .set({label: start.format('YYYY-MM-dd').cat(' - ').cat(stop.format('YYYY-MM-dd'))})
  })
}).flatten()

images = ee.ImageCollection(images)
  
// animate
animation.animate(images, {label: 'label', maxFrames: 200})  

// export video
var utils = require('users/gena/packages:utils')
utils.exportVideo(images, {bounds: bounds, label: 'label', maxFrames: 600, name: 'animation', label: 'label' })


