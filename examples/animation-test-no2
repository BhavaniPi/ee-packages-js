/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var no2 = ee.ImageCollection("COPERNICUS/S5P/NRTI/L3_NO2"),
    ne = ee.Image("users/gena/NE1_HR_LC_SR_W"),
    land = ee.Image("users/gena/land_polygons_image");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var gl = require('users/gena/packages:gl')
var palettes = require('users/gena/packages:palettes')
var style = require('users/gena/packages:style')
var animation = require('users/gena/packages:animation')
var utils = require('users/gena/packages:utils')

var dem = ee.Image("JAXA/ALOS/AW3D30/V2_2").select('AVE_DSM')
// var dem = ee.Image("USGS/NED")


// var weight = 1.0
// var extrusion = 30
// var sunAzimuth = 315
// var sunElevation = 15
// var contrast = 0
// var brightness = 0
// var saturation = 0.25
// var shadows = true

// var styled = ne.visualize({ gamma: 0.3, min: 0, max: 255 })
// dem = dem.unmask(0, false).multiply(land.mask())

var weight = 0.6
var extrusion = 5
var sunAzimuth = 315 + 90
var sunElevation = 5
var contrast = 0
var brightness = 0
var saturation = 0.5
var shadows = true

var styled = ne.visualize({ min: 0, max: 255 })
dem = dem.updateMask(land.mask()).blend(ee.Image(0).float().updateMask(land.mask().not()))


var demHillshaded = utils.hillshadeRGB(styled, dem, weight, extrusion, sunAzimuth, sunElevation, contrast, brightness, saturation, shadows)

// Map.addLayer(demHillshaded, {}, 'dem (hillshade)')


Map.setOptions('HYBRID')
// Map.setOptions('TERRAIN')
// style.SetMapStyleDark()

var no2Var = 'tropospheric_NO2_column_number_density'
// var no2Var = 'NO2_column_number_density'

// var palette = palettes.matplotlib.magma[7]
// var palette = ["#000004","#2C105C","#711F81","#B63679","#EE605E","#FDAE78","#FCFDBF"]

var palette = palettes.crameri.roma[50].slice(0).reverse().slice(20)

var vis = {
  min: 0.00009, max: 0.00016,
  palette: palette
}

// var vis = {
//   min: 0.00001, max: 0.0004,
//   palette: palette
// };


no2 = no2.select([no2Var, 'cloud_fraction'])

function resample(images) {
  return images.map(function(i) { return i.resample('bicubic') })
}

var start = ee.Date('2019-09-01')

var timeStep = 1 // days
// var timeMax = 7 * 40
var timeMax = 7 * 4
var timeWindow = -30 // duration to look back in days

var dates = ee.List.sequence(0, timeMax, timeStep).map(function(offset) {
  return start.advance(offset, 'day')
})

function maskClouds(i) {
  var mask = gl.smoothstep(0, 0.15, i.select('cloud_fraction'))
  return i.updateMask(mask)
}

function smoothen(i) {
  return i.convolve(ee.Kernel.gaussian(10000, 5000, 'meters'))
    .copyProperties(i, ['system:time_start'])
}

no2 = no2.filterDate(start.advance(timeWindow, 'day'), start.advance(timeMax, 'day'))
  .map(maskClouds)
  .map(smoothen)
  .select(no2Var)

print(no2.first())

var images = dates.map(function(t) {
  t = ee.Date(t)
  var imagesSample = no2.filterDate(t.advance(timeWindow, 'day'), t)
  var i = imagesSample
    // .median()
    // .reduce(ee.Reducer.percentile([25]))
    .mean()
    // .unmask(0, false)
  return i.set({ 
    count: imagesSample.size(), 
    'system:time_start': t.millis() 
  })
})

images = ee.ImageCollection(images).filter(ee.Filter.gt('count', 0))

// Map.addLayer(images.first())

var images = images.map(function(i) {
  var t = i.date()
  
  var mask = gl.smoothstep(0, vis.min, i).multiply(0.95)
  // var mask = i.unitScale(vis.min - (vis.max-vis.min) * 0.5, vis.max).add(0.1).multiply(0.9)
  
  return ee.ImageCollection([
    demHillshaded.visualize({ forceRgbOutput: true }), 
    ee.Image(1).byte().mask(0.15).visualize({ palette: ['000000'], forceRgbOutput: true }),
    i.updateMask(mask).visualize(vis)
  ]).mosaic().set({ label: t.format('YYYY-MM-dd') })
})

// Map.addLayer(images.first())
// throw(0)

animation.animate(images, { label: 'label', maxFrames: 150 })
